[1mdiff --git a/check_tiers.py b/check_tiers.py[m
[1mnew file mode 100644[m
[1mindex 0000000..fd07241[m
[1m--- /dev/null[m
[1m+++ b/check_tiers.py[m
[36m@@ -0,0 +1,28 @@[m
[32m+[m[32mimport os[m
[32m+[m[32mimport django[m
[32m+[m
[32m+[m[32m# Set up Django environment[m
[32m+[m[32mos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'safechain_ai.settings')[m
[32m+[m[32mdjango.setup()[m
[32m+[m
[32m+[m[32mfrom core.models import Company[m
[32m+[m
[32m+[m[32mdef check_investment_tiers():[m
[32m+[m[32m    """Check current investment tiers"""[m
[32m+[m[32m    companies = Company.objects.all().order_by('share_price')[m
[32m+[m[41m    [m
[32m+[m[32m    print("Current Investment Tiers:")[m
[32m+[m[32m    print("=" * 50)[m
[32m+[m[41m    [m
[32m+[m[32m    for company in companies:[m
[32m+[m[32m        roi = ((company.expected_return - company.share_price) / company.share_price) * 100[m
[32m+[m[32m        print(f"Name: {company.name}")[m
[32m+[m[32m        print(f"Investment: R{company.share_price}")[m
[32m+[m[32m        print(f"Return: R{company.expected_return}")[m
[32m+[m[32m        print(f"Duration: {company.duration_days} days")[m
[32m+[m[32m        print(f"ROI: {roi:.1f}%")[m
[32m+[m[32m        print(f"Description: {company.description}")[m
[32m+[m[32m        print("-" * 30)[m
[32m+[m
[32m+[m[32mif __name__ == '__main__':[m
[32m+[m[32m    check_investment_tiers()[m
\ No newline at end of file[m
[1mdiff --git a/core/migrations/__pycache__/0001_initial.cpython-313.pyc b/core/migrations/__pycache__/0001_initial.cpython-313.pyc[m
[1mindex 080491f..a064eab 100644[m
Binary files a/core/migrations/__pycache__/0001_initial.cpython-313.pyc and b/core/migrations/__pycache__/0001_initial.cpython-313.pyc differ
[1mdiff --git a/core/migrations/__pycache__/__init__.cpython-313.pyc b/core/migrations/__pycache__/__init__.cpython-313.pyc[m
[1mindex 829e303..0ecb133 100644[m
Binary files a/core/migrations/__pycache__/__init__.cpython-313.pyc and b/core/migrations/__pycache__/__init__.cpython-313.pyc differ
[1mdiff --git a/core/templatetags/__pycache__/__init__.cpython-313.pyc b/core/templatetags/__pycache__/__init__.cpython-313.pyc[m
[1mindex cb61ced..4526041 100644[m
Binary files a/core/templatetags/__pycache__/__init__.cpython-313.pyc and b/core/templatetags/__pycache__/__init__.cpython-313.pyc differ
[1mdiff --git a/core/templatetags/__pycache__/core_extras.cpython-313.pyc b/core/templatetags/__pycache__/core_extras.cpython-313.pyc[m
[1mindex 3c9d297..1a8a360 100644[m
Binary files a/core/templatetags/__pycache__/core_extras.cpython-313.pyc and b/core/templatetags/__pycache__/core_extras.cpython-313.pyc differ
[1mdiff --git a/db.sqlite3 b/db.sqlite3[m
[1mindex 1e6159b..976b658 100644[m
Binary files a/db.sqlite3 and b/db.sqlite3 differ
[1mdiff --git a/safechain_ai/__pycache__/__init__.cpython-313.pyc b/safechain_ai/__pycache__/__init__.cpython-313.pyc[m
[1mindex 7b6f59b..cbdcc09 100644[m
Binary files a/safechain_ai/__pycache__/__init__.cpython-313.pyc and b/safechain_ai/__pycache__/__init__.cpython-313.pyc differ
[1mdiff --git a/safechain_ai/__pycache__/settings.cpython-313.pyc b/safechain_ai/__pycache__/settings.cpython-313.pyc[m
[1mindex 369c178..7693778 100644[m
Binary files a/safechain_ai/__pycache__/settings.cpython-313.pyc and b/safechain_ai/__pycache__/settings.cpython-313.pyc differ
[1mdiff --git a/safechain_ai/__pycache__/urls.cpython-313.pyc b/safechain_ai/__pycache__/urls.cpython-313.pyc[m
[1mindex 07f53e6..c809081 100644[m
Binary files a/safechain_ai/__pycache__/urls.cpython-313.pyc and b/safechain_ai/__pycache__/urls.cpython-313.pyc differ
[1mdiff --git a/safechain_ai/__pycache__/wsgi.cpython-313.pyc b/safechain_ai/__pycache__/wsgi.cpython-313.pyc[m
[1mindex b4da8e6..7352e13 100644[m
Binary files a/safechain_ai/__pycache__/wsgi.cpython-313.pyc and b/safechain_ai/__pycache__/wsgi.cpython-313.pyc differ
[1mdiff --git a/test_investment_payout.py b/test_investment_payout.py[m
[1mnew file mode 100644[m
[1mindex 0000000..62d5c69[m
[1m--- /dev/null[m
[1m+++ b/test_investment_payout.py[m
[36m@@ -0,0 +1,82 @@[m
[32m+[m[32mimport os[m
[32m+[m[32mimport django[m
[32m+[m[32mfrom decimal import Decimal[m
[32m+[m[32mfrom django.utils import timezone[m
[32m+[m[32mfrom datetime import timedelta[m
[32m+[m
[32m+[m[32m# Set up Django environment[m
[32m+[m[32mos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'safechain_ai.settings')[m
[32m+[m[32mdjango.setup()[m
[32m+[m
[32m+[m[32mfrom core.models import CustomUser, Wallet, InvestmentPlan, PlanInvestment[m
[32m+[m
[32m+[m[32mdef test_investment_payout():[m
[32m+[m[32m    """Test that investments automatically close and pay out after their duration"""[m
[32m+[m[41m    [m
[32m+[m[32m    # Get the test user[m
[32m+[m[32m    try:[m
[32m+[m[32m        user = CustomUser.objects.get(email='admin@example.com')[m
[32m+[m[32m    except CustomUser.DoesNotExist:[m
[32m+[m[32m        print("Admin user not found.")[m
[32m+[m[32m        return[m
[32m+[m[41m    [m
[32m+[m[32m    # Get the user's wallet[m
[32m+[m[32m    wallet, created = Wallet.objects.get_or_create(user=user)[m
[32m+[m[32m    initial_balance = wallet.balance[m
[32m+[m[41m    [m
[32m+[m[32m    print(f"Initial wallet balance: R{initial_balance}")[m
[32m+[m[41m    [m
[32m+[m[32m    # Get the shortest duration plan investment (Shoprite Plan)[m
[32m+[m[32m    try:[m
[32m+[m[32m        investment = PlanInvestment.objects.filter(user=user, plan__name='Shoprite Plan').first()[m
[32m+[m[32m        if not investment:[m
[32m+[m[32m            print("No investment found for Shoprite Plan.")[m
[32m+[m[32m            return[m
[32m+[m[41m            [m
[32m+[m[32m        print(f"Testing investment: {investment.plan.name}")[m
[32m+[m[32m        print(f"Investment amount: R{investment.amount}")[m
[32m+[m[32m        print(f"Expected return: R{investment.return_amount}")[m
[32m+[m[32m        print(f"Total expected payout: R{investment.amount + investment.return_amount}")[m
[32m+[m[32m        print(f"Investment start: {investment.start_date}")[m
[32m+[m[32m        print(f"Investment end: {investment.end_date}")[m
[32m+[m[41m        [m
[32m+[m[32m        # Simulate time passing by manually setting the investment end date to now[m
[32m+[m[32m        print("Simulating time passage by setting investment end date to now...")[m
[32m+[m[32m        investment.end_date = timezone.now()[m
[32m+[m[32m        investment.save()[m
[32m+[m[41m        [m
[32m+[m[32m        # Refresh the investment from the database[m
[32m+[m[32m        investment.refresh_from_db()[m
[32m+[m[41m        [m
[32m+[m[32m        print(f"Is investment complete? {investment.is_complete()}")[m
[32m+[m[32m        print(f"Is investment active? {investment.is_active}")[m
[32m+[m[32m        print(f"Has profit been paid? {investment.profit_paid}")[m
[32m+[m[41m        [m
[32m+[m[32m        # Trigger the save method which should process the payout[m
[32m+[m[32m        print("Triggering investment save to process payout...")[m
[32m+[m[32m        investment.save()[m
[32m+[m[41m        [m
[32m+[m[32m        # Refresh the investment and wallet from the database[m
[32m+[m[32m        investment.refresh_from_db()[m
[32m+[m[32m        wallet.refresh_from_db()[m
[32m+[m[41m        [m
[32m+[m[32m        print(f"Is investment complete? {investment.is_complete()}")[m
[32m+[m[32m        print(f"Is investment active? {investment.is_active}")[m
[32m+[m[32m        print(f"Has profit been paid? {investment.profit_paid}")[m
[32m+[m[32m        print(f"Final wallet balance: R{wallet.balance}")[m
[32m+[m[41m        [m
[32m+[m[32m        expected_balance = initial_balance + investment.amount + investment.return_amount[m
[32m+[m[32m        print(f"Expected wallet balance: R{expected_balance}")[m
[32m+[m[41m        [m
[32m+[m[32m        if wallet.balance == expected_balance:[m
[32m+[m[32m            print("‚úÖ Payout successful! Wallet balance matches expected amount.")[m
[32m+[m[32m        else:[m
[32m+[m[32m            print("‚ùå Payout failed! Wallet balance does not match expected amount.")[m
[32m+[m[41m            [m
[32m+[m[32m    except Exception as e:[m
[32m+[m[32m        print(f"Error testing investment payout: {e}")[m
[32m+[m
[32m+[m[32mif __name__ == '__main__':[m
[32m+[m[32m    print("Testing investment payout functionality...")[m
[32m+[m[32m    test_investment_payout()[m
[32m+[m[32m    print("Test complete!")[m
\ No newline at end of file[m
[1mdiff --git a/update_tiers.py b/update_tiers.py[m
[1mnew file mode 100644[m
[1mindex 0000000..24ce675[m
[1m--- /dev/null[m
[1m+++ b/update_tiers.py[m
[36m@@ -0,0 +1,81 @@[m
[32m+[m[32mimport os[m
[32m+[m[32mimport django[m
[32m+[m[32mfrom decimal import Decimal[m
[32m+[m
[32m+[m[32m# Set up Django environment[m
[32m+[m[32mos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'safechain_ai.settings')[m
[32m+[m[32mdjango.setup()[m
[32m+[m
[32m+[m[32mfrom core.models import Company[m
[32m+[m
[32m+[m[32mdef update_investment_tiers():[m
[32m+[m[32m    """[m
[32m+[m[32m    Update investment tiers to match the new structure:[m
[32m+[m[41m    [m
[32m+[m[32m    Foundation Tier (Beginner Friendly):[m
[32m+[m[32m    ‚Ä¢ R70 - R1,120[m
[32m+[m[41m    [m
[32m+[m[32m    Growth Tier (Intermediate):[m
[32m+[m[32m    ‚Ä¢ R2,240 - R17,920[m
[32m+[m[41m    [m
[32m+[m[32m    Premium Tier (Advanced):[m
[32m+[m[32m    ‚Ä¢ R35,840 - R50,000[m
[32m+[m[32m    """[m
[32m+[m[41m    [m
[32m+[m[32m    # Define the new tiers with proper ranges[m
[32m+[m[32m    new_tiers = [[m
[32m+[m[32m        {[m
[32m+[m[32m            'name': 'Foundation Tier',[m
[32m+[m[32m            'share_price': Decimal('70.00'),[m
[32m+[m[32m            'expected_return': Decimal('1120.00'),[m
[32m+[m[32m            'duration_days': 7,[m
[32m+[m[32m            'min_level': 1,[m
[32m+[m[32m            'description': 'Beginner Friendly - Investment range: R70 - R1,120'[m
[32m+[m[32m        },[m
[32m+[m[32m        {[m
[32m+[m[32m            'name': 'Growth Tier',[m
[32m+[m[32m            'share_price': Decimal('2240.00'),[m
[32m+[m[32m            'expected_return': Decimal('17920.00'),[m
[32m+[m[32m            'duration_days': 14,[m
[32m+[m[32m            'min_level': 1,[m
[32m+[m[32m            'description': 'Intermediate - Investment range: R2,240 - R17,920'[m
[32m+[m[32m        },[m
[32m+[m[32m        {[m
[32m+[m[32m            'name': 'Premium Tier',[m
[32m+[m[32m            'share_price': Decimal('35840.00'),[m
[32m+[m[32m            'expected_return': Decimal('50000.00'),[m
[32m+[m[32m            'duration_days': 30,[m
[32m+[m[32m            'min_level': 1,[m
[32m+[m[32m            'description': 'Advanced - Investment range: R35,840 - R50,000'[m
[32m+[m[32m        },[m
[32m+[m[32m    ][m
[32m+[m
[32m+[m[32m    # Update or create the new tiers[m
[32m+[m[32m    for tier in new_tiers:[m
[32m+[m[32m        company, created = Company.objects.update_or_create([m
[32m+[m[32m            name=tier['name'],[m
[32m+[m[32m            defaults={[m
[32m+[m[32m                'share_price': tier['share_price'],[m
[32m+[m[32m                'expected_return': tier['expected_return'],[m
[32m+[m[32m                'duration_days': tier['duration_days'],[m
[32m+[m[32m                'min_level': tier['min_level'],[m
[32m+[m[32m                'description': tier['description'][m
[32m+[m[32m            }[m
[32m+[m[32m        )[m
[32m+[m[41m        [m
[32m+[m[32m        if created:[m
[32m+[m[32m            print(f"Created new tier: {tier['name']}")[m
[32m+[m[32m        else:[m
[32m+[m[32m            print(f"Updated existing tier: {tier['name']}")[m
[32m+[m
[32m+[m[32m    # Remove any old tiers if they exist[m
[32m+[m[32m    old_tier_names = ['Sasol', 'Shoprite Holdings', 'Naspers', 'MTN Group', 'Woolworths Holdings', 'Bidvest Group'][m
[32m+[m[32m    for name in old_tier_names:[m
[32m+[m[32m        deleted_count, _ = Company.objects.filter(name=name).delete()[m
[32m+[m[32m        if deleted_count > 0:[m
[32m+[m[32m            print(f"Removed old tier: {name}")[m
[32m+[m
[32m+[m[32mif __name__ == '__main__':[m
[32m+[m[32m    print("Updating investment tiers...")[m
[32m+[m[32m    update_investment_tiers()[m
[32m+[m[32m    print("Investment tiers updated successfully!")[m
\ No newline at end of file[m
[1mdiff --git a/verify_investment_functionality.py b/verify_investment_functionality.py[m
[1mnew file mode 100644[m
[1mindex 0000000..fdb49ad[m
[1m--- /dev/null[m
[1m+++ b/verify_investment_functionality.py[m
[36m@@ -0,0 +1,85 @@[m
[32m+[m[32mimport os[m
[32m+[m[32mimport django[m
[32m+[m[32mfrom decimal import Decimal[m
[32m+[m[32mfrom django.utils import timezone[m
[32m+[m
[32m+[m[32m# Set up Django environment[m
[32m+[m[32mos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'safechain_ai.settings')[m
[32m+[m[32mdjango.setup()[m
[32m+[m
[32m+[m[32mfrom core.models import CustomUser, Wallet, InvestmentPlan, PlanInvestment[m
[32m+[m
[32m+[m[32mdef verify_investment_functionality():[m
[32m+[m[32m    """Verify that investments automatically close and pay out after their duration"""[m
[32m+[m[41m    [m
[32m+[m[32m    # Get a test user (or create one if needed)[m
[32m+[m[32m    try:[m
[32m+[m[32m        user = CustomUser.objects.get(email='admin@example.com')[m
[32m+[m[32m    except CustomUser.DoesNotExist:[m
[32m+[m[32m        print("Admin user not found. Please run this script after setting up the admin user.")[m
[32m+[m[32m        return[m
[32m+[m[41m    [m
[32m+[m[32m    # Get the user's wallet[m
[32m+[m[32m    wallet, created = Wallet.objects.get_or_create(user=user)[m
[32m+[m[32m    initial_balance = wallet.balance[m
[32m+[m[41m    [m
[32m+[m[32m    print(f"Initial wallet balance: R{initial_balance}")[m
[32m+[m[41m    [m
[32m+[m[32m    # Get the shortest duration plan (Shoprite Plan - 12 hours)[m
[32m+[m[32m    try:[m
[32m+[m[32m        plan = InvestmentPlan.objects.get(name='Shoprite Plan')[m
[32m+[m[32m        print(f"Testing with plan: {plan.name} (R{plan.min_amount} -> R{plan.return_amount})")[m
[32m+[m[41m        [m
[32m+[m[32m        # Check if user already has an investment in this plan[m
[32m+[m[32m        existing_investment = PlanInvestment.objects.filter(user=user, plan=plan).first()[m
[32m+[m[32m        if existing_investment:[m
[32m+[m[32m            print("User already has an investment in this plan. Skipping creation.")[m
[32m+[m[32m            print(f"Investment details: R{existing_investment.amount} -> R{existing_investment.return_amount}")[m
[32m+[m[32m            print(f"Investment start: {existing_investment.start_date}")[m
[32m+[m[32m            print(f"Investment end: {existing_investment.end_date}")[m
[32m+[m[32m            print(f"Time remaining: {existing_investment.time_remaining()}")[m
[32m+[m[41m            [m
[32m+[m[32m            # Check if investment is complete[m
[32m+[m[32m            if existing_investment.is_complete() and existing_investment.is_active and not existing_investment.profit_paid:[m
[32m+[m[32m                print("Investment is complete but not yet paid out. Triggering payout...")[m
[32m+[m[32m                # Manually trigger the save method to process the payout[m
[32m+[m[32m                existing_investment.save()[m
[32m+[m[32m                wallet.refresh_from_db()[m
[32m+[m[32m                print(f"Updated wallet balance: R{wallet.balance}")[m
[32m+[m[32m                print(f"Payout amount: R{existing_investment.amount + existing_investment.return_amount}")[m
[32m+